/*
char *operators = "&,.=!-%|+;*^@#";
char *separators = "(){}[]";

if((strchr(operators, src) || strchr(separators, src)==NULL)){
  }

if(strchr(operators, src)){
  printf("OPERATOR");
  }
*/


/*

GPT

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_TOKENS 100

void tokenize(const char *str, const char *delimiters, char tokens[MAX_TOKENS][256], int *token_count) {
    *token_count = 0;
    int token_length = 0;

    for (int i = 0; str[i] != '\0'; i++) {
        int is_delimiter = 0;
        for (int j = 0; delimiters[j] != '\0'; j++) {
            if (str[i] == delimiters[j]) {
                is_delimiter = 1;
                break;
            }
        }

        if (is_delimiter) {
            tokens[*token_count][token_length] = '\0';
            (*token_count)++;
            token_length = 0;

            if (*token_count >= MAX_TOKENS) {
                break;
            }
        } else {
            tokens[*token_count][token_length] = str[i];
            token_length++;

            if (token_length >= 255) {
                fprintf(stderr, "Token too long\n");
                exit(EXIT_FAILURE);
            }
        }
    }
    if (token_length > 0) {
        tokens[*token_count][token_length] = '\0';
        (*token_count)++;
    }
}

int main() {
    char tokens[MAX_TOKENS][256];
    int token_count;

    tokenize("int a == 3;", " ", tokens, &token_count);

    printf("%s\n", tokens[2]);

    return 0;
}


void tokenize(const char *src, const char *delim){
  char *token[sizeof(str)];

  for (int i = 0; str[i] != '\0'; i++) {
        int is_delimiter = 0;
        for (int j = 0; delimiters[j] != '\0'; j++) {
            if (str[i] == delimiters[j]) {
                is_delimiter = 1;
                break;
            }
        }
}

*/
